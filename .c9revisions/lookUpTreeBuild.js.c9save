{"ts":1341588187115,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\nvar ScriptNode=document.createElement('script');\nScriptNode.setAttribute('type','text/javascript');\nScriptNode.setAttribute('src','https://dl.dropbox.com/u/79021836/TCGA_Ref_EMR/DiseaseClass.js');\ndocument.head.appendChild(ScriptNode);\n\nvar ScriptNode=document.createElement('script');\nScriptNode.setAttribute('type','text/javascript');\nScriptNode.setAttribute('src','https://dl.dropbox.com/u/79021836/library/caolan-async-4351b56/lib/async.js');\ndocument.head.appendChild(ScriptNode);\n\n\nvar lookUpTree={};\nlookUpTree['disease']=new Array();\n \n \n var aDisease={};\n\n var currentWindow=this;\n var extTree={};\n\n\n\n\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n/*\n * \n * pipeline\n * \n */\n\n\nwindow.setTimeout(function(){startProcess(lookUpTree);},5000);\n\n\n\n\nfunction startProcess(lookUpTree){\n\n    var currentWin=this;\n \n    getAllDiseaseTypes();\n    window.setTimeout(function(){processingDiseaseType(lookUpTree,currentWin.allDiseaseTypes);},20000);\n \n \n \n    function processingDiseaseType(lookUpTree,allDiseaseTypes){\n \t  console.log(allDiseaseTypes.length);\n \t  for(var j=0; j<allDiseaseTypes.length; j++){\n      \n \t  lookUpTree['disease'].push (allDiseaseTypes[j]);\t\n \t  lookUpTree[allDiseaseTypes[j]]={};\n \t  lookUpTree[allDiseaseTypes[j]]['dataType']=new Array();\n \t  \n     \t  \n \t  \n \t   \t  \n \t }    \n \t  feedDataType2BackEndTree(lookUpTree,allDiseaseTypes);\n   }\n \t \t \t \t\n \n    \n   function feedDataType2BackEndTree(lookUpTree,allDiseaseTypes){\n     \t\n      \n  \t for(var k=0; k<allDiseaseTypes.length; k++){\n        \n  \t   if(k==25){\n  \t   \t  break;\n  \t   }\n  \t   \n  \t   \n  \t   var aDisease=new Disease(allDiseaseTypes[k]);\t\n  \t   var disName=aDisease.diseaseName;\n  \t \n  \t   \n  \t   aDisease.getDataTypeByDisease(lookUpTree);\n\n    }\n    window.setTimeout(function(){fillUrlsGivenDataType(allDiseaseTypes,lookUpTree);},10000);\n  }\n \n  function fillUrlsGivenDataType(allDiseaseTypes,lookUpTree){\n    \tfor(var i=0; i<allDiseaseTypes.length ; i++){\n    \t\t\n    \t\tif(i==allDiseaseTypes.length){\n    \t\t\tbreak;\n    \t\t}\n    \t\t\n    \t\tvar numOfDataTypes=lookUpTree[allDiseaseTypes[i]]['dataType'].length;\n    \t\t\n    \t\tfor(var j=0;j<numOfDataTypes ;j++){\n    \t\t\t\n    \t\t\t\n    \t\t\tif(j==numOfDataTypes){\n    \t\t\t\t break;\n    \t\t\t}\n    \t\t\t\n    \t\t    if(lookUpTree[allDiseaseTypes[i]]['dataType'][j].match(/slide_images/)){\n    \t\t    \tlookUpTree[allDiseaseTypes[i]]['slide_images']={};  \t\t    \t\n    \t\t    \tlookUpTree[allDiseaseTypes[i]]['slide_images']['url']=new Array();\n    \t\t    \t\n    \t\t    }\n    \t\t    \n    \t\t    \n    \t\t      if(lookUpTree[allDiseaseTypes[i]]['dataType'][j].match(/clin/)){\n    \t\t    \tlookUpTree[allDiseaseTypes[i]]['clin']={};\n    \t\t    \tlookUpTree[allDiseaseTypes[i]]['clin']['url']=new Array();\n    \t\t    \t\n    \t\t    \tvar aDisease=new Disease(allDiseaseTypes[i]);\n    \t\t    \taDisease.setClinUrlinTreeByDisease(lookUpTree,i,allDiseaseTypes);\n    \t\t    \n    \t\t    \t\n    \t\t    }\t\n    \t\t    \n    \t\t    \t\n    \t\t}\n    \t}    \t\n    \t window.setTimeout(function(){fillSubDataTypeGivenDataType(allDiseaseTypes,lookUpTree);},10000);\n    }\n    \n    \n  function fillSubDataTypeGivenDataType(allDiseases,lookUpTree){\n    \tfor(var i=0; i<allDiseases.length ; i++){\n    \t\t\n    \t\tif(i==allDiseases.length){\n    \t\t\tbreak;\n    \t\t}\n    \t\t\n    \t\tvar numOfDataTypes=lookUpTree[allDiseases[i]]['dataType'].length;\n    \t\t\n    \t\tfor(var j=0;j<numOfDataTypes ;j++){\n    \t\t\t\n    \t\t\t\n    \t\t\tif(j==numOfDataTypes){\n    \t\t\t\t break;\n    \t\t\t}\n    \t\t\t\n    \t\t    if(lookUpTree[allDiseases[i]]['dataType'][j].match(/slide_images/)){\n    \t\t    \tlookUpTree[allDiseases[i]]['slide_images']['url']['tcga_barcode']=new Array();\n    \t\t    }\n    \t\t    \n    \t\t    \n    \t\t      if(lookUpTree[allDiseases[i]]['dataType'][j].match(/clin/)){\n    \t\t     \n    \t\t    \tvar aDisease=new Disease(allDiseases[i]);\n    \t\t    \t\n    \t\t    \taDisease.setSubDataTypesInTreeByDisease(lookUpTree,i,allDiseases,'clin');\n    \t\t    \t\n    \t\t    }\t\n    \t\t    \n    \t\t    \t\n    \t\t}\n    \t}\n        window.setTimeout(function(){fillBarcodeHasClinicalData(allDiseaseTypes,lookUpTree);},20000);\n    }\n \n   \n   \n   \n   \n   \n  function fillBarcodeHasClinicalData(allDiseases,lookUpTree){\n  \t\n  \t\tvar q=async.queue(function (task, callback) {\n  \t\t\t\n  \t\t\t \n  \t   \n  \t                    \n  \t                           \n  \t                      TCGA.get(task.url, function(error,data){\n  \t                      \t          \n  \t                                         \tconsole.log(error);\n  \t                                         \t\n  \t                                         \tlookUpTree[allDiseases[task.idx_i]]['clin']['url_barcode_map'].push(task.url);\n  \t                                          \tvar cuurentTbl=splitTbl2Array(data,false);\n  \t                                            var currentColNames=cuurentTbl[0];\n  \t    \n    \t   \n  \t                                         \tfor(var idx=1; idx<cuurentTbl.length; idx++){\n  \t   \t\n  \t                                          \t\tif(idx==cuurentTbl.length){\n  \t                                         \t\t\tbreak;\n                                             \t   \t\t}\n  \t \n  \t   \t                                          var tcga_barcodes=new Array();\n  \t   \t                                          tcga_barcodes[idx-1]=cuurentTbl[idx][currentColNames.indexOf(task.resultColname)];\n  \t   \t\t                                      lookUpTree[allDiseases[task.idx_i]]['clin']['url_barcode_map'].push(tcga_barcodes);\n  \t   \t\t                                     }\n  \t   \t\t                             window.setTimeout(function(){ callback();},5000);        \n  \t   \t\t                         \n  \t   \t                  });\n\n  \t\t\t\n  \t     \n  \t\t},1);\n  \t\n  \t\n  \tvar queueArray=[ ];\n\tfor(var i=0; i<allDiseases.length ; i++){\n    \t\t\n    \t\tif(i==allDiseases.length){\n    \t\t\tbreak;\n    \t\t}\n    \t\t\n    \t\t\n    \t\tvar numOfDataTypes=lookUpTree[allDiseases[i]]['dataType'].length;\n    \t\t\n    \t\tfor(var j=0;j<numOfDataTypes ;j++){\n    \t\t\t\n    \t\t\t\n    \t\t\tif(j==numOfDataTypes){\n    \t\t\t\t break;\n    \t\t\t}\n    \t\t\t\n    \t\t    if(lookUpTree[allDiseases[i]]['dataType'][j].match(/clin/)){\n    \t\t      \n    \t\t    \tvar aDisease=new Disease(allDiseases[i]);\n    \t\t    \tlookUpTree[allDiseases[i]]['clin']['url_barcode_map']=new Array();\n    \t\t    \t\n    \t\t    \tvar totLen=lookUpTree[allDiseases[i]]['clin']['url_colNames_map'].length;   \t\t    \t\n    \t\t    \tvar start=totLen/2;\n    \t\t    \tfor(var k=start;k<totLen;k++){\n    \t\t    \t\t\n    \t\t    \t\tif(k==totLen){\n    \t\t    \t\t\tbreak;\n    \t\t    \t\t}\n    \t\t    \t\t\n    \t\t    \t\t\n    \t\t    \t\tvar subDataTypes=lookUpTree[allDiseases[i]]['clin']['url_colNames_map'][k];\n    \t\t    \t\tif(subDataTypes.indexOf(\"bcr_sample_barcode\")> -1){\n    \t\t    \t\t\t\n    \t\t    \t\t\tvar urlIndex=k-totLen/2;\n    \t\t    \t\t\tvar currentURL=lookUpTree[allDiseases[i]]['clin']['url_colNames_map'][urlIndex];\n    \t\t    \t\t\t\n    \t\t    \t\t     queueArray= queueArray.concat({idx_i:i,url:currentURL,resultColname:\"bcr_sample_barcode\"});\n    \t\t    \t\t}\n    \t\t    \t\t\n    \t\t    \t\t\t\t\n    \t\t    \t    if(subDataTypes.indexOf(\"bcr_patient_barcode\")> -1){\n    \t\t    \t\t\t\n    \t\t    \t\t\tvar urlIndex=k-totLen/2;\n    \t\t    \t\t\tvar currentURL=lookUpTree[allDiseases[i]]['clin']['url_colNames_map'][urlIndex];\n    \t\t    \t\t\t \n    \t\t    \t\t\t queueArray= queueArray.concat({idx_i:i,url:currentURL,resultColname:\"bcr_patient_barcode\"});\n    \t\t    \t\t   \n    \t\t    \t\t}\n    \t\t    \t\t\n    \t\t    \t}\n    \t\t    \t\n    \t\t    }\t\n    \t\t\t\n    \t\t\t\n    \t\t}\n    \t\t\n    \t}\n    \t\n    \t\n    \t  q.drain = function() { console.log('all items have been processed'); }\n    \t  \n \t\t  q.push(queueArray, function (err) {\n \t\t  \t\n \t\t  });\n   }\n\n \n \n \n   \t\n   \t\n   \t\n   \t\n   \t\n   \t\n   \t\n   \t\n   \n  \n   \n    \n}\n"]],"start1":0,"start2":0,"length1":0,"length2":7791}]],"length":7791}
