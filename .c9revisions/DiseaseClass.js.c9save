{"ts":1341588206544,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\r\n/*\r\n * conversion of data structure ___________reuseful \r\n */\r\n\r\n\r\nfunction  queryResultObj2Array(qr,targetIdx){\r\n\t//assuming query results ares at the targetIdx of every  array element in object\r\n\tvar output=new Array();\r\n\tfor(var i=0; i<qr.length;i++){\r\n\t\toutput[i]=qr[i][targetIdx].toString().replace(/\\\"/g,\"\");\r\n\t}\r\n\treturn(output);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction splitTbl2Array(tbl,hasColName){\r\n   allText=tbl.split(\"\\n\");\r\n   var colNum=(allText[0].split(\"\\t\")).length;\r\n   var rawRowNum=allText.length;\r\n   \r\n   var rowNum;\r\n   var startRow;\r\n   var i;  \r\n   \r\n   if(hasColName){\r\n   \t   rowNum=rawRowNum-1;\r\n   \t   startRow=1;\r\n   }\r\n   \r\n   else{\r\n   \t   rowNum=rawRowNum;\r\n   \t   startRow=0;\r\n   }  \r\n   \r\n   \r\n   var tabularData=new Array(rowNum);\r\n   for(i=startRow;i<allText.length;i++){\r\n   \t    var tblRowIdx;\r\n   \t    if(hasColName){\r\n   \t    \ttblRowIdx=i-1;\r\n   \t    }\r\n   \t    else{\r\n   \t    \ttblRowIdx=i;\r\n   \t    }\r\n   \t    \r\n   \t    tabularData[tblRowIdx]=new Array(colNum);   \t \r\n   \t    var thisLine=allText[i].split(\"\\t\");\r\n   \t    for(j=0;j<colNum;j++){\r\n   \t    \ttabularData[tblRowIdx][j]=thisLine[j];\r\n   \t    }\r\n   \t     \r\n   }\r\n   return(tabularData);    \t\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//Management of TCGA barcode\r\n\r\n\r\n\r\n\r\n\r\nfunction barcode2elements(barcode,dataType){\r\n\t     var barcodeElement={};\n         \r\n         var tempArray=barcode.split('-');\r\n         tempArray.shift();\r\n         \r\n         if(dataType===\"slide_images\"){\r\n         \ttempArray.pop();\r\n         \t//console.log(tempArray.length);\r\n         \tbarcodeElement={\r\n         \t\ttissue_source_site:tempArray[0],\r\n         \t\tparticipant:tempArray[1],\r\n         \t\tsampleType:tempArray[2].match(/\\d+/),\r\n         \t\tvial:tempArray[2].match(/[A-Z]/),\r\n         \t\tportion:tempArray[3].match(/\\d+/),\r\n         \t\tanalyte:tempArray[3].match(/[A-Z]/)\r\n         \t\t\r\n         \t};\r\n         }\r\n         \r\n         \r\n         return  barcodeElement;\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n// constructor of disease class\r\nvar  Disease=function(diseaseName){\r\n       this.diseaseName=diseaseName;\r\n       this.dataTypes=new Array();\r\n      \r\n    };\r\n    \r\n    \r\n    //current url :http://localhost:8080/tcga_ref_emr_backend/CatchLookUpTree\r\n    \r\n    //to fix\r\nDisease.prototype.send2Server=function(lookUpTree,serverURL){\r\n\tvar that=this;\r\n\tthat.dSet=lookUpTree[that.diseaseName];\r\n\tthat.dsetJson=JSON.stringify([that.diseaseName,that.dSet]);\r\n\t$.ajax({\r\n\t\ttype: 'post',\r\n\t\tdata:that.dsetJson,\r\n\t\tcontentType: 'application/json',\r\n\t\tdataType: 'jsonp',\r\n\t\turl:serverURL,\r\n\t\tsuccess: function(data) {\r\n                    console.log('Load was performed.');\r\n                 },\r\n        error:function(xhr,err){\r\n                    console.log(\"readyState: \"+xhr.readyState+\"\\nstatus: \"+xhr.status);\r\n                    console.log(\"responseText: \"+xhr.responseText);\r\n                  }\r\n\t\t\r\n\t});\r\n\t\r\n}    \r\n    \r\nDisease.prototype.getPatientsInBcrImages=function(lookUpTree){\r\n\t      var that=this;\r\n          var sparql_template= [ \"prefix tcga:<http://purl.org/tcga/core#>\",\r\n                                 \"prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>\",\r\n                                 \"prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>\",\r\n                                 \"prefix owl:<http://www.w3.org/2002//07/owl#>\",                       \r\n                                 \"prefix dc:<http://purl.org/dc/ele07/owl#>\",\r\n                                 \"prefix dc:<http://purl.org/dc/elements/1.1/>\",\r\n                                 \"prefix dcterms:<http://purl.org/dc/terms/>\",\r\n                                 \"prefix foaf:<http://xmlns.com/foaf/0.1/>\",\r\n                                 \"prefix fti:<http://franz.com/ns/allegrograph/2.2/textindex/>\",\r\n                                 \"prefix skos:<http://www.w3.org/2004/02/skos/core#>\",\r\n                           \"select distinct ?dataType ?name ?url where { \",\r\n                           \"?file tcga:url ?url .\",\r\n                           \"?file rdfs:label ?name .\",\r\n                           \"filter ( contains(?name, \"+\"\\'\"+\".svs\"+\"\\'\"+\") ) .\",\r\n                           \"?file tcga:data-type ?d.\",\r\n                           \"?d rdfs:label ?dataType.\",\r\n                           \"?file tcga:disease-study ?ds . \",\r\n                           \"?ds rdfs:label \"+\"\\'\"+'tumor/'+this.diseaseName+\"\\'\"+\".\"+\"}\"\r\n                           ];\r\n                           \r\n        var sparql_query=sparql_template.join(\" \");\r\n                                                                              \r\n        TCGA.hub.query(sparql_query,function(error,data){console.log(error); that.patientsOfImageData=queryResultObj2Array(data,1);that.urls4PatientsOfImageData=queryResultObj2Array(data,2)});\r\n        \r\n        //result is an array where every element is a type of biomedical data\r\n      \r\n    };\r\n    \r\n    \r\n  Disease.prototype.getUrlsOfClinicalDataSets=function(){\r\n  \t  var that=this;\r\n  \t  var sparql_template= [ \"prefix tcga:<http://purl.org/tcga/core#>\",\r\n                                 \"prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>\",\r\n                                 \"prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>\",\r\n                                 \"prefix owl:<http://www.w3.org/2002//07/owl#>\",                       \r\n                                 \"prefix dc:<http://purl.org/dc/ele07/owl#>\",\r\n                                 \"prefix dc:<http://purl.org/dc/elements/1.1/>\",\r\n                                 \"prefix dcterms:<http://purl.org/dc/terms/>\",\r\n                                 \"prefix foaf:<http://xmlns.com/foaf/0.1/>\",\r\n                                 \"prefix fti:<http://franz.com/ns/allegrograph/2.2/textindex/>\",\r\n                                 \"prefix skos:<http://www.w3.org/2004/02/skos/core#>\",\r\n                           \"select distinct ?url where { \",\r\n                           \"?file tcga:url ?url .\",                         \r\n                           \"filter ( contains(?url, \"+\"\\'\"+'tumor/'+this.diseaseName+\"\\'\"+\") ) .\",\r\n                           \"filter ( contains(?url, \"+\"\\'\"+\"clin\"+\"\\'\"+\") ) .\",\r\n                           \"filter ( contains(?url, \"+\"\\'\"+\".txt\"+\"\\'\"+\") ) .\",\r\n                           \"filter ( contains(?url, \"+\"\\'\"+\"public\"+\"\\'\"+\") ) .\",        \r\n                           \"}\"\r\n                           ];\r\n                           \r\n        var sparql_query=sparql_template.join(\" \");\r\n                                                                                \r\n        TCGA.hub.query(sparql_query,function(error,data){console.log(error);that.urlsOfClinicalDataSets=queryResultObj2Array(data,0);});\r\n        \r\n        //result is an array where every element is a type of biomedical data\r\n  };\r\n  \r\n  \r\n   Disease.prototype.setClinUrlinTreeByDisease=function(lookUpTree,i,allDiseases){\r\n   \t  var that=this;\r\n  \t  var sparql_template= [ \"prefix tcga:<http://purl.org/tcga/core#>\",\r\n                                 \"prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>\",\r\n                                 \"prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>\",\r\n                                 \"prefix owl:<http://www.w3.org/2002//07/owl#>\",                       \r\n                                 \"prefix dc:<http://purl.org/dc/ele07/owl#>\",\r\n                                 \"prefix dc:<http://purl.org/dc/elements/1.1/>\",\r\n                                 \"prefix dcterms:<http://purl.org/dc/terms/>\",\r\n                                 \"prefix foaf:<http://xmlns.com/foaf/0.1/>\",\r\n                                 \"prefix fti:<http://franz.com/ns/allegrograph/2.2/textindex/>\",\r\n                                 \"prefix skos:<http://www.w3.org/2004/02/skos/core#>\",\r\n                           \"select distinct ?url where { \",\r\n                           \"?file tcga:url ?url .\",                         \r\n                           \"filter ( contains(?url, \"+\"\\'\"+'tumor/'+this.diseaseName+\"\\'\"+\") ) .\",\r\n                           \"filter ( contains(?url, \"+\"\\'\"+\"clin\"+\"\\'\"+\") ) .\",\r\n                           \"filter ( contains(?url, \"+\"\\'\"+\".txt\"+\"\\'\"+\") ) .\",\r\n                           \"filter ( contains(?url, \"+\"\\'\"+\"public\"+\"\\'\"+\") ) .\",        \r\n                           \"}\"\r\n                           ];\r\n                           \r\n        var sparql_query=sparql_template.join(\" \");\r\n                                                                                \r\n        TCGA.hub.query(sparql_query,function(error,data){\r\n                                                           console.log(error);\r\n                                                           that.urlsOfClinicalDataSets=data.results.bindings.map(function (obj) { return obj.url.value; });;\r\n                                                           lookUpTree[allDiseases[i]]['clin']['url']=that.urlsOfClinicalDataSets;\r\n                                                  \r\n                                                          });\r\n        \r\n   \t  \r\n   \t  \r\n   \t \r\n\r\n   }\r\n \r\n \r\n   Disease.prototype.setSubDataTypesInTreeByDisease=function(lookUpTree,i,allDiseases,mainDataType){\r\n   \t                                                 \r\n   \t                                                       var that= this;\r\n   \t                                                       lookUpTree[allDiseases[i]][mainDataType]['url_colNames_map']=new Array();\r\n   \t                                                          \r\n                                                           for(var j =0; j< lookUpTree[allDiseases[i]][mainDataType]['url'].length;j++){\r\n   \t  \t\t                                                     \r\n   \t  \t\t                                                     \r\n   \t                  \t                                        if(j==lookUpTree[allDiseases[i]][mainDataType]['url'].length){\r\n   \t  \t                                                        \t break;\r\n   \t                                                       \t     }\t\r\n \t                                                          \r\n \t                                                          \r\n \t                                                           \r\n \t                                                            lookUpTree[allDiseases[i]][mainDataType]['url_colNames_map'].push( lookUpTree[allDiseases[i]][mainDataType]['url'][j]);\r\n \t                                                            \r\n  \t                                                            TCGA.get(lookUpTree[allDiseases[i]][mainDataType]['url'][j], function(error,data){\r\n  \t                                                                                                                                            \tconsole.log(error);\r\n  \t                                                                                                                                             \tthat.cuurentTbl=splitTbl2Array(data,false);                                                                                                                                 \r\n  \t                                                                                                                                            \tthat.currentColNames=that.cuurentTbl[0];\r\n  \t                                                                                                                                             \tlookUpTree[allDiseases[i]][mainDataType]['url_colNames_map'].push(that.currentColNames);\r\n  \t                                                           \t                                                                                 }); \t     \r\n  \t     \r\n  \t                                                          \r\n                                                            }\r\n                                                          \r\n   }\r\n \r\n \r\n \r\n \r\n \r\n \r\n   Disease.prototype.getDataTypes=function(){\r\n   \tvar that=this;\r\n   \tvar sparql_template= [ \"prefix tcga:<http://purl.org/tcga/core#>\",\r\n                        \"prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>\",\r\n                        \"prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>\",\r\n                        \"prefix owl:<http://www.w3.org/2002//07/owl#>\",                       \r\n                        \"prefix dc:<http://purl.org/dc/ele07/owl#>\",\r\n                        \"prefix dc:<http://purl.org/dc/elements/1.1/>\",\r\n                        \"prefix dcterms:<http://purl.org/dc/terms/>\",\r\n                        \"prefix foaf:<http://xmlns.com/foaf/0.1/>\",\r\n                        \"prefix fti:<http://franz.com/ns/allegrograph/2.2/textindex/>\",\r\n                        \"prefix skos:<http://www.w3.org/2004/02/skos/core#>\",\r\n                           \"select distinct ?type where { \",\r\n                           \"?file tcga:data-type ?t . \",\r\n                           \"?t rdfs:label ?type . \",\r\n                           \"?file tcga:disease-study ?d . \",\r\n                           \"?d rdfs:label \"+\"\\'\"+this.diseaseName+\"\\'\"+\".\"+\"}\"\r\n                           ];\r\n                           \r\n        var sparql_query=sparql_template.join(\" \");                       // note :this refers to the windows\r\n        TCGA.hub.query(sparql_query,function(error,data){console.log(error);that.dataTypes= queryResultObj2Array(data,0);});\r\n   \r\n        \r\n        \r\n                 \r\n         \r\n       }\r\n \r\n \r\n \r\n \r\n   Disease.prototype.getDataTypeByDisease=function(lookUpTree){\r\n   \tvar that=this;\r\n   \tvar sparql_template= [ \"prefix tcga:<http://purl.org/tcga/core#>\",\r\n                        \"prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>\",\r\n                        \"prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>\",\r\n                        \"prefix owl:<http://www.w3.org/2002//07/owl#>\",                       \r\n                        \"prefix dc:<http://purl.org/dc/ele07/owl#>\",\r\n                        \"prefix dc:<http://purl.org/dc/elements/1.1/>\",\r\n                        \"prefix dcterms:<http://purl.org/dc/terms/>\",\r\n                        \"prefix foaf:<http://xmlns.com/foaf/0.1/>\",\r\n                        \"prefix fti:<http://franz.com/ns/allegrograph/2.2/textindex/>\",\r\n                        \"prefix skos:<http://www.w3.org/2004/02/skos/core#>\",\r\n                           \"select distinct ?type where { \",\r\n                           \"?file tcga:data-type ?t . \",\r\n                           \"?t rdfs:label ?type . \",\r\n                           \"?file tcga:disease-study ?d . \",\r\n                           \"?d rdfs:label \"+\"\\'\"+this.diseaseName+\"\\'\"+\".\"+\"}\"\r\n                           ];\r\n                           \r\n        var sparql_query=sparql_template.join(\" \");                       \r\n        TCGA.hub.query(sparql_query,function(error,data){\r\n        \t                                              console.log(error);\r\n        \t                                              //that.dataTypes= queryResultObj2Array(data.results.bindings.map(function (obj) { return obj.type.value; }),0);\r\n        \t                                              that.dataTypes=data.results.bindings.map(function (obj) { return obj.type.value; });\r\n        \t                                              lookUpTree[that.diseaseName]['dataType']=that.dataTypes;});\r\n   \r\n        \r\n        \r\n                 \r\n         \r\n       }\r\n  \r\n\r\n\r\n\r\n  \r\n  \r\n Disease.prototype.fetchOneColInFile=function(lookUpTree,i,j,k,allDiseases,mainDataType,currentURL,resultColname,urlResultMapName){\r\n  \t   \r\n  \t   var that=this;\r\n  \t   that.currentColNames=new Array();\r\n  \t   \r\n  \t   \r\n  \t   lookUpTree[allDiseases[i]][mainDataType][urlResultMapName]=new Array();\r\n  \t   \r\n  \t   \t   \r\n       lookUpTree[allDiseases[i]][mainDataType][urlResultMapName].push(currentURL);\r\n       \r\n  \t   TCGA.get(currentURL, function(error,data){\r\n  \t   \tconsole.log(error);\r\n  \t   \tthat.cuurentTbl=splitTbl2Array(data,false);\r\n  \t   //\tconsole.log(currentURL);\r\n  \t   \tthat.currentColNames=that.cuurentTbl[0];\r\n  \t    \r\n    \t    // console.log('----');\n  \t   \t    // console.log(that.currentColNames.indexOf(resultColname));\n  \t   \t    // console.log('----'); \r\n  \t    \r\n  \t    \r\n  \t   \tfor(var idx=1; idx<that.cuurentTbl.length; idx++){\r\n  \t   \t\r\n  \t   \t\tif(idx==that.cuurentTbl.length){\r\n  \t   \t\t\tbreak;\r\n  \t   \t\t}\r\n  \t   \t//\tconsole.log(that.currentColNames);\r\n  \t   \t    // console.log(idx);\n  \t   \t    // console.log(typeof that.currentColNames);\n  \t   \t    // console.log(typeof that.cuurentTbl[idx]);\n  \t   \t    // console.log('---');\r\n  \t   \t    that.tcga_barcodes=new Array();\r\n  \t   \t    \r\n  \t   \t   // console.log(that.cuurentTbl[idx][that.currentColNames.indexOf(resultColname)]);\r\n  \t   \t\tthat.tcga_barcodes[idx-1]=that.cuurentTbl[idx][that.currentColNames.indexOf(resultColname)];\r\n  \t   \t\tlookUpTree[allDiseases[i]][mainDataType][urlResultMapName].push(that.tcga_barcodes);\r\n  \t   \t\t}\r\n  \t   \t\t\r\n  \t   \t});\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n//assuming colnames are tab-separated\r\n  Disease.prototype.fetchColNames=function(url){\r\n  \t   var that=this;\r\n  \t   TCGA.get(url, function(error,data){console.log(error);that.cuurentTbl=splitTbl2Array(data,false);that.currentColNames=that.cuurentTbl[0];});\r\n  }\r\n\r\n  \r\n  \r\n  //assuming colnames are tab-separated\r\n  Disease.prototype.fetchRowColNames=function(url,ColIndexForRowName){\r\n  \t   var that=this;\r\n  \t   TCGA.get(url, function(error,data){console.log(error);that.cuurentTbl=splitTbl2Array(data,false);that.currentColNames=that.cuurentTbl[0];that.tcga_barcodes=new Array();for(var i=1; i<that.cuurentTbl.length; i++){that.tcga_barcodes[i-1]=that.cuurentTbl[i][ColIndexForRowName];}});\r\n  }\r\n\r\n  \r\n  \r\n\r\n\r\n//static functions for building look-up  tree\r\n  function getAllDiseaseTypes(){\r\n  \t  var that= this;\r\n  \t  var sparql_template= [ \"prefix tcga:<http://purl.org/tcga/core#>\",\r\n                        \"prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>\",\r\n                        \"prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>\",\r\n                        \"prefix owl:<http://www.w3.org/2002//07/owl#>\",                       \r\n                        \"prefix dc:<http://purl.org/dc/ele07/owl#>\",\r\n                        \"prefix dc:<http://purl.org/dc/elements/1.1/>\",\r\n                        \"prefix dcterms:<http://purl.org/dc/terms/>\",\r\n                        \"prefix foaf:<http://xmlns.com/foaf/0.1/>\",\r\n                        \"prefix fti:<http://franz.com/ns/allegrograph/2.2/textindex/>\",\r\n                        \"prefix skos:<http://www.w3.org/2004/02/skos/core#>\",\r\n                           \"select  distinct ?diseaseType where { \",\r\n                           \"?file tcga:disease-study ?diseases .\",\r\n                           \"?diseases rdfs:label ?diseaseType.\",\r\n                           \"}\"\r\n                           ];\r\n                           \r\n        var sparql_query=sparql_template.join(\" \");                      \r\n        TCGA.hub.query(sparql_query,function(error,data){\r\n        \tconsole.log(error);\r\n        \tthat.allDiseaseTypes=data.results.bindings.map(function (obj) { return obj.diseaseType.value; });\r\n        \t\r\n        });\r\n      \r\n  }\r\n  \r\n"]],"start1":0,"start2":0,"length1":0,"length2":19150}]],"length":19150}
